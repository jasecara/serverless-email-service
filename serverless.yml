service:
  name: email-service
provider:
  name: aws
  runtime: nodejs12.x
  stage: '${opt:stage,''dev''}'
  memorySize: 256
  timeout: 15
  region: us-east-1
  stackName: ${self:service.name}-${self:provider.stage}
  environment:
    DEPLOYED_ENV: ${self:provider.stage}
    MEDIA_BUCKET: !Ref EmailServiceMediaBucket
    RECORD_TABLE: !Ref EmailServiceTable
    API_BASE_URL: !Join ['', [ 'https://', !Ref ApiGatewayRestApi, '.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}' ] ]
functions:
  send:
    handler: lambdas/send.handler
    role: EmailServiceLambdaRole
    reservedConcurrency: 20
    events:
      - http:
          path: /send
          method: post
          async: false
resources:
  Resources:
    ############################
    ########## Common ##########
    ############################
    EmailServiceDefaultFromParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Name: !Sub /${self:service.name}/${self:provider.stage}/DEFAULT_FROM_ADDRESS
        Type: String
        Value: 'noreply@eztouch-menu.com'
    EmailServiceDefaultFromName:
      Type: AWS::SSM::Parameter
      Properties:
        Name: !Sub /${self:service.name}/${self:provider.stage}/DEFAULT_FROM_NAME
        Type: String
        Value: 'EZTouch Menu'
    EmailServiceLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: ${self:service.name}-${self:provider.stage}-lambda-role-policy
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:PutObject
                  Resource: !Join ['', [ 'arn:aws:s3:::', !Ref EmailServiceMediaBucket, '/*' ] ]
                - Effect: Allow
                  Action:
                    - sns:Publish
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - ses:SendEmail
                    - ses:SendRawEmail
                  Resource:
                    - '*'
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Resource: !GetAtt EmailServiceTable.Arn
    EmailServiceTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: emailServiceId
            AttributeType: S
        KeySchema:
          - AttributeName: emailServiceId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TimeToLiveSpecification:
          AttributeName: lifecycleExpiresAt
          Enabled: true
    EmailServiceMediaBucket:
      Type: AWS::S3::Bucket

  ##################################
  ########## Stack Outputs #########
  ##################################
  Outputs:
    SendEmailEndpoint:
      Description: "Send Email Endpoint"
      Value:
        !Join ['', [ 'https://', !Ref ApiGatewayRestApi, '.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}', '/send' ] ]